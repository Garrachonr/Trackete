[{"/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/index.js":"1","/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/App.js":"2","/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/reportWebVitals.js":"3","/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/TFGList.js":"4","/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/TFGEdit.js":"5","/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/Home.js":"6","/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/AppNavbar.js":"7","/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/parcelList/Overview.js":"8","/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/parcelList/Add.js":"9"},{"size":525,"mtime":1649064626455,"results":"10","hashOfConfig":"11"},{"size":561,"mtime":1649064638483,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1648830226000,"results":"13","hashOfConfig":"11"},{"size":2659,"mtime":1648830226000,"results":"14","hashOfConfig":"11"},{"size":3759,"mtime":1648830226000,"results":"15","hashOfConfig":"11"},{"size":4637,"mtime":1649067921947,"results":"16","hashOfConfig":"11"},{"size":571,"mtime":1648830226000,"results":"17","hashOfConfig":"11"},{"size":1658,"mtime":1649067918103,"results":"18","hashOfConfig":"11"},{"size":1022,"mtime":1648999674000,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1sixvi8",{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},{"filePath":"38","messages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/index.js",[],"/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/App.js",[],"/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/reportWebVitals.js",[],"/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/TFGList.js",[],"/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/TFGEdit.js",[],"/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/Home.js",["40","41","42","43","44","45"],"import React, { Component, useState, useEffect } from 'react';\nimport './style.css';\nimport { Link } from 'react-router-dom';\nimport { Button, Container } from 'react-bootstrap';\nimport Overview from \"./parcelList/Overview\";\nimport Add from \"./parcelList/Add\";\n\nfunction Home() {\n\n    const PARCEL_ARRAY = [];\n    const SHIP_NUMBER = \"\";\n    const COMPANY = \"\";\n    const NUMBER_ARRAY = [];\n    const COMPANY_ARRAY = [];\n\n    const [parcel_array, setParcelArray] = useState (PARCEL_ARRAY);\n    const [ship_number, setShipNumber] = useState(SHIP_NUMBER);\n    const [company, setCompany] = useState (COMPANY);\n    const [number_array, setNumberArray] = useState (NUMBER_ARRAY);\n    const [company_array, setCompanyArray] = useState(COMPANY_ARRAY);\n\n    useEffect(() => {\n        // Update the document title using the browser API\n        document.title = \"Home\";\n        \n        // Database Acesss\n        async function fetchData(){\n            const response = await fetch(\"/ships/email/paco@gmail.com\");\n            const myjson = await response.json();\n            var data = []; \n            data = myjson.map((parcel, i) => parcel.pedido);\n            setNumberArray(data);\n            data = myjson.map((parcel, i) => parcel.company);\n            setCompanyArray(data);\n        }\n        fetchData();\n    }, []);\n\n    function cargar(){\n        var array = parcel_array;\n        number_array.map((parcel, i) => {\n            var shipment = {\"shipnumber\" : parcel, \"company\" : company_array[i]};\n            console.log(shipment);\n            array = [...array, shipment];\n        })\n        setParcelArray(array);\n    }\n\n    async function guardar(){\n        \n        var log = {\"name\":\"melon\",\"email\": \"paco@gmail.com\", \"pass\": \"...\", \"company\": company, \n                        \"pedido\": ship_number, \"status\": \"...\",\"address\":\"...\"};\n        await fetch('/ships', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(log)\n        });\n    }\n\n    function handleShipNumber(a){\n        setShipNumber(a);\n    }\n\n    function handleCompany(a){\n        //setCompany(a);\n    }\n\n    async function uploadParcel(){\n        const options = {\n            method: 'POST',\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json',\n                'aftership-api-key': '612c49aa-28f8-4543-b7d9-1ea47b7f1510'\n            },\n            body: JSON.stringify({tracking: {tracking_number: ship_number}})\n        };\n            \n        const response = await fetch('https://api.aftership.com/v4/trackings', options);\n        const myjson = await response.json();\n        setCompany(myjson.data.tracking.slug);\n    }\n\n    function saveParcel(){\n        var shipment = {\"shipnumber\" : ship_number, \"company\" : company};\n        var array = [...parcel_array, shipment];\n        guardar();\n        setParcelArray(array);\n        setShipNumber(\"\");\n        setCompany(\"\");\n    }\n\n    return (\n        <div class=\"aside\">\n\n            <br></br>\n            <br></br>\n            <br></br>\n\n            <img src={process.env.PUBLIC_URL + \"/images/Logo.png\"} height=\"150\" widht=\"150\" alt=\"Image\" align = \"center\"></img>\n\n            <div class=\"row\">\n                <Button class=\"ghost\">Pedidos</Button>\n                <Button>Cerrar sesion</Button>\n                \n            </div>\n   \n            <br></br>\n            <br></br>\n\n            <div class=\"row\">\n                <p>paco@gmail.com</p>\n                <Button onClick={() => cargar()}>Cargar</Button>\n            </div>\n\n            <br></br>\n            <br></br>\n\n            <Add ship_number={ship_number} company={company} handleShipNumber={a => handleShipNumber(a)} \n                handleCompany={a => handleCompany(a)} clickSearch={() => uploadParcel()} clickSave={()=> saveParcel()}/>\n\n            <br></br>\n\n            <div class=\"col-12  mainPagecontainer \">\n                <h2 class=\"blog-post-title\">Pedidos</h2>\n\n                <div class=\"aside\">\n                    <table>\n                    {parcel_array.map((parcel, i) => {return (<Overview index = {i} number={parcel.shipnumber} \n                        company={parcel.company}/>)})}\n                    </table>\n                </div>   \n            </div>\n\n            <br></br>\n            <br></br>\n\n            <img src={process.env.PUBLIC_URL + \"/images/LogoSinTexto.png\"} height=\"150\" widht=\"150\" alt=\"Image\" align = \"center\"/>            \n\n        </div>    \n\n\n    );\n  }\n\n\nexport default Home;","/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/AppNavbar.js",[],"/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/parcelList/Overview.js",["46","47"],"import React, { useState, useEffect } from 'react';\nimport '../style.css';\n\n\nexport default function Overview(props) {\n\n    const PARCEL = [{}];\n\n    const [parcel, setParcel] = useState(PARCEL);\n    const [loading, setLoading] = useState(true);\n\n    const link = \"https://api.aftership.com/v4/trackings/\" + props.company + \"/\" + props.number + \"/\";\n\n    useEffect(() => {\n        async function fetchData() {\n            const options = {\n                method: 'GET',\n                headers: {\n                    Accept: 'application/json',\n                    'Content-Type': 'application/json',\n                    'aftership-api-key': '612c49aa-28f8-4543-b7d9-1ea47b7f1510'\n                }\n            }\n            const response = await fetch(link, options);      \n            const myjson = await response.json();\n            //console.log(myjson.data.tracking.slug);\n            setParcel(myjson);\n            setTimeout(() => {setLoading(false)}, 750);\n        }\n        fetchData();\n      }, []);\n\n      return (\n        <tbody>\n            <tr key={\"number\" + props.index} align=\"center\">\n                <td>{loading ? <div>Cargando</div> : parcel.data.tracking ?  <img src={process.env.PUBLIC_URL + \"/images/\" + parcel.data.tracking.slug + \".png\"} height=\"200\" widht=\"200\"></img> : <div></div>}</td>\n               <td>{loading ? <div>Cargando</div> : parcel.data.tracking ? <p>{parcel.data.tracking.slug}</p> : <div></div>}</td>\n               <td></td>\n               <td>{loading ? <div>Cargando</div> : parcel.data.tracking ? <p>{parcel.data.tracking.subtag_message}</p> : <div></div>}</td>\n            </tr>\n        </tbody>\n    );\n\n}","/home/sergio.jberron/Desktop/Sprint 2/Trackete-main/frontend/src/parcelList/Add.js",[],{"ruleId":"48","severity":1,"message":"49","line":1,"column":17,"nodeType":"50","messageId":"51","endLine":1,"endColumn":26},{"ruleId":"48","severity":1,"message":"52","line":3,"column":10,"nodeType":"50","messageId":"51","endLine":3,"endColumn":14},{"ruleId":"48","severity":1,"message":"53","line":4,"column":18,"nodeType":"50","messageId":"51","endLine":4,"endColumn":27},{"ruleId":"54","severity":1,"message":"55","line":41,"column":38,"nodeType":"56","messageId":"57","endLine":41,"endColumn":40},{"ruleId":"58","severity":1,"message":"59","line":103,"column":13,"nodeType":"60","endLine":103,"endColumn":122},{"ruleId":"58","severity":1,"message":"59","line":141,"column":13,"nodeType":"60","endLine":141,"endColumn":131},{"ruleId":"61","severity":1,"message":"62","line":31,"column":10,"nodeType":"63","endLine":31,"endColumn":12,"suggestions":"64"},{"ruleId":"65","severity":1,"message":"66","line":36,"column":78,"nodeType":"60","endLine":36,"endColumn":187},"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","'Container' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'link'. Either include it or remove the dependency array.","ArrayExpression",["67"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",{"desc":"68","fix":"69"},"Update the dependencies array to be: [link]",{"range":"70","text":"71"},[1008,1010],"[link]"]